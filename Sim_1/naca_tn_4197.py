# -----------------------------------------------------------------------------------
# Project: Honours Thesis Simulation 1
# Title: Rocket Trajectory/ Input Data
# Author: Thomas Lando
# -----------------------------------------------------------------------------------

# Imports
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Initial plot will use the formulas provided in NACA TN 4197

# NACA TN 4197
# Atmospheric terms
h = [-2000, -1500, -1000, -500, 0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000,
     7500, 8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000, 13500, 14000, 14500, 15000, 15500,
     16000, 16500, 17000, 17500, 18000, 18500, 19000, 19500, 20000, 22000, 24000, 26000, 28000, 30000]

p = [1.2778, 1.207, 1.1393, 1.0748, 1.01325, 0.9546, 0.8988, 0.8456, 0.795, 0.7469, 0.7012, 0.6578, 0.6166, 0.5775,
     0.5405, 0.5054, 0.4722, 0.4408, 0.4111, 0.383, 0.3565, 0.3315, 0.308, 0.2858, 0.265, 0.2454, 0.227, 0.2098,
     0.194, 0.1793, 0.1658, 0.1533, 0.1417, 0.131, 0.1211, 0.112, 0.1035, 0.09572, 0.0885, 0.08182, 0.07565, 0.06995,
     0.06467, 0.0598, 0.05529, 0.04047, 0.02972, 0.02188, 0.01616, 0.01197]

rho = [1.2067, 1.1522, 1.0996, 1.0489, 1, 0.9529, 0.9075, 0.8638, 0.8217, 0.7812, 0.7423, 0.7048, 0.6689,
       0.6343, 0.6012, 0.5694, 0.5389, 0.5096, 0.4817, 0.4549, 0.4292, 0.4047, 0.3813, 0.3589, 0.3376, 0.3172,
       0.2978, 0.2755, 0.2546, 0.2354, 0.2176, 0.2012, 0.186, 0.172, 0.159, 0.147, 0.1359, 0.1256, 0.1162,
       0.1074, 0.0993, 0.09182, 0.08489, 0.0785, 0.07258, 0.05266, 0.03832, 0.02797, 0.02047,
       0.01503]

a = [347.9,	346,	344.1,	342.2,	340.3,	338.4,	336.4,	334.5,	332.5,	330.6,	328.6,	326.6,	324.6,	322.6,
     320.5,	318.5,	316.5,	314.4,	312.3,	310.2,	308.1,	306,	303.8,	301.7,	299.8,	297.4,	295.2,	295.1,
     295.1,	295.1,	295.1,	295.1,	295.1,	295.1,	295.1, 295.1,	295.1,	295.1,	295.1,	295.1,	295.1,	295.1,
     295.1,	295.1,	295.1,	296.4,	297.7,	299.1,	300.4,	301.7]

# unit to imperial conversions
m2ft = 3.28084
bar2psi = 14.5038/1.01325
density_convert = 1.125*0.062428
pa2psi = 0.000145038


G_e = 5e9 * pa2psi
A = np.linspace(0.01, 1, num=11)
t_c = np.linspace(0.001, 1, num=11)
taper_ratio = np.linspace(0.01, 1, num=11)

vf_ms = []
vf_mach = []
for n in range(len(h)):
    flutter = a[n]*m2ft*np.sqrt(G_e/((39.3*A[0]**3)/(t_c[0]**3*(A[0]+2)))*p[n]*bar2psi*(taper_ratio[0]+1)/2)
    vf_ms.append(flutter)
    vf_mach.append(flutter/(a[n]*m2ft))


plt.figure(1)
plt.plot([n * m2ft for n in h], vf_ms)
plt.grid()
plt.ylabel('Flutter Velocity (ft/s)')
plt.xlabel('Altitude (ft)')


plt.figure(2)
plt.plot([n * m2ft for n in h], vf_mach)
plt.grid()
plt.xlabel('Altitude (ft)')
plt.ylabel('Flutter Mach')
plt.show()


# Rocket simulation

